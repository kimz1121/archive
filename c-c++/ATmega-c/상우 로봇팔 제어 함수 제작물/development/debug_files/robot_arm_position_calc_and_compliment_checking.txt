#include<stdio.h>
#include<math.h>

 

struct position_management
{
	//ractangular_coordinates
	double macroscopic_current_position_x;
	double macroscopic_current_position_y;
	double macroscopic_current_position_z;

	double macroscopic_destination_position_x;
	double macroscopic_destination_position_y;
	double macroscopic_destination_position_z;


	double microscopic_current_position_x;
	double microscopic_current_position_y;
	double microscopic_current_position_z;
	
	double transformed_current_position_x;
	double transformed_current_position_y;
	double transformed_current_position_z;
	

	double microscopic_destination_position_x;
	double microscopic_destination_position_y;
	double microscopic_destination_position_z;
	
	double transformed_purpose_position_x;
	double transformed_purpose_position_y;
	double transformed_purpose_position_z;
};

struct function_part
{

	double seta = 0.5*M_PI;

	double length = 5;
	
	//function_part_control
	//seta_value.
	double macroscopic_current_position_seta = 0;
	double macroscopic_destination_position_seta = 0;
	
	double microscopic_current_position_seta = 0;
	double microscopic_destination_position_seta = 0;
	
	//grip_value.
	double macroscopic_current_position_grip = 0;
	double macroscopic_destination_position_grip = 0;
	
	double microscopic_current_position_grip = 0;
	double microscopic_destination_position_grip = 0;

}func_gripper;

struct motor_mathod
{
	//바뀌기 어려운 기계고유적 특성 
	int motor_type;//'s' step,'b' bldc
	int step_per_revolution_presison;
	
	//기계고유적 특성과 사용자의 임의 지정의 사이
	char proper_direction;
	char  initialization_value;
	
	//사용자가 임의로 설치한 특성
	char motor_port;
	int motor_pin;
	int hall_sensor_pin;
	
	//기계부품 제어 특성
	char motor_driving_mode;//stop or natural.
	
	//하드웨어적 특성을 실시간으로 저장하기 위한 변수
	//general, 공통의
	char error;
	int cumulated_steps;
	
	//hall_sensor_only, 홀센서 전용
	int current_hall_sensor_value;// = -1
	int just_before_hall_sensor_value;// = -1
	int microscopic_displacement_value;
	int direction_value;


	double progress_situation;// = 0//진행상황
	char macroscopic_complition;// = 0//standard 0 , present progressive -1, 1 finished.
	char microscopic_complition;// = 0//standard 0 , present progressive -1, 1 finished.
	
	
	//<s>직교제어가 아닌 각도 제어에 필요한 변수.===========
	long macroscopic_destination_position;// = 0//거시적 경로 설정 함수에서 활용
	long macroscopic_current_position;// = 0
	
	long microscopic_destination_position;// = 0//미시적 경로 설정 함수에서 사용
	long microscopic_current_position;// = 0
	//<e>==================================================
	
	//직교제어에서 이용되는 변수. 
	double destination_degree;
	long current_step;
	long destination_step;
};

struct motor_list
{

	

	struct motor_mathod m1_stepper;//제 1관절 모터
	struct motor_mathod m2_bldc;//제 2관절 모터
	struct motor_mathod m3_stepper;//제 3관절 모터
	struct motor_mathod m4_stepper;//제 4관절 모터
	struct motor_mathod m5_servo_gripper;
	void* ending_NULL_pointer;// = NULL
	
	double stream_of_time;

	char robot_dirvig_compliment_value;

	struct position_management position_value;


	
	int munber_of_motors;

	

}robot_arm_1;

int robot_dirvig_compliment_value = 1;

int rectangular_coordinates_first_class_order(double purpose_position_x, double purpose_position_y, double purpose_position_z, double* destination_position_x, double* destination_position_y, double* destination_position_z)
{
	if(robot_dirvig_compliment_value == 1)
	{
		*destination_position_x = purpose_position_x;
		*destination_position_y = purpose_position_y;
		*destination_position_z = purpose_position_z;
	}
}

int combine_ordering(struct motor_list* robot_name, struct function_part* function_name, double purpose_position_x, double purpose_position_y, double purpose_position_z, double purpose_seta, double purpose_grip)
{
	if(robot_dirvig_compliment_value == 1)
	{
		(*robot_name).position_value.macroscopic_destination_position_x = purpose_position_x;
		(*robot_name).position_value.macroscopic_destination_position_y = purpose_position_y;
		(*robot_name).position_value.macroscopic_destination_position_z = purpose_position_z;
		(*function_name).macroscopic_destination_position_seta = purpose_seta;
		(*function_name).macroscopic_destination_position_grip = purpose_grip;
	}
}

int function_ordering(struct motor_list* robot_name, struct function_part* function_name, double seta, double grip)
{
	
}

int position_ordering(struct motor_list* robot_name, struct function_part* function_name, double x, double y, double z)
{
	
}



int combine_macroscopic_to_micro_ordering(struct motor_list* robot_name, struct function_part* function_name, double time_out)
{
	(*robot_name).position_value.microscopic_destination_position_x = (*robot_name).position_value.macroscopic_current_position_x + ((*robot_name).position_value.macroscopic_destination_position_x - (*robot_name).position_value.macroscopic_current_position_x) * ((*robot_name).stream_of_time / time_out);
	(*robot_name).position_value.microscopic_destination_position_y = (*robot_name).position_value.macroscopic_current_position_y + ((*robot_name).position_value.macroscopic_destination_position_y - (*robot_name).position_value.macroscopic_current_position_y) * ((*robot_name).stream_of_time / time_out);
	(*robot_name).position_value.microscopic_destination_position_z = (*robot_name).position_value.macroscopic_current_position_z + ((*robot_name).position_value.macroscopic_destination_position_z - (*robot_name).position_value.macroscopic_current_position_z) * ((*robot_name).stream_of_time / time_out);
	(*function_name).macroscopic_destination_position_seta = (*function_name).macroscopic_current_position_seta + ((*function_name).macroscopic_destination_position_seta - (*function_name).macroscopic_current_position_seta) * ((*robot_name).stream_of_time / time_out);
	(*function_name).macroscopic_destination_position_grip = (*function_name).macroscopic_current_position_grip + ((*function_name).macroscopic_destination_position_grip - (*function_name).macroscopic_current_position_grip) * ((*robot_name).stream_of_time / time_out);
}


int function_part_position_transformation(double seta, double length, double x, double y, double z, double* adress_of_x, double* adress_of_y, double* adress_of_z)
{
	//정관절인 경우만 적동하도록 제한 한다면. 
	if((seta-M_PI_2)*(seta-M_PI_2)>M_PI_2*M_PI_2)
	{
		return 0;
	} 
	// 현재 함수의 경우  DEGREE_OF_SETA 가 atan2(y, x)를 통해 결정되는 경우 이므로 SETA의 값이 중요 하지 않음. 
	//이 아니리ㅏ role 각도가 있는 경우 이므로 atan2(y, x)와 개별 적인 변수 임. 
	double t_seta = (seta);
	*adress_of_x = x - length*sin(t_seta)*cos(atan2(y, x));
	*adress_of_y = y - length*sin(t_seta)*sin(atan2(y, x));
	*adress_of_z = z - length*cos(t_seta);
}


int robot_4aix_arm_degree_clac(double l_1, double l_2, double l_3, double x_destination, double y_destination , double z_destination, double function_target_degree, double* m1_degree, double* m2_degree, double* m3_degree, double* m4_degree, double* cumulated_angle_position)
{
	double r_0 = sqrt(x_destination*x_destination + y_destination*y_destination + z_destination*z_destination);
	
	double yaw_0 = atan2(y_destination, x_destination);
	double pitch_0 = atan(z_destination/sqrt(x_destination*x_destination + y_destination*y_destination));//sholder
	double phi_0 = M_PI_2-pitch_0;
	double side_1 = sqrt(l_1*l_1 + r_0*r_0 - 2*l_1*r_0*cos(phi_0));
	double pitch_1 = asin(r_0 / side_1 * sin(phi_0));
	double phi_1 = acos((side_1*side_1 + l_2*l_2 - l_3*l_3)/(2*side_1*l_2));
	double resultant_1 = M_PI - (phi_1 + pitch_1);
	double sigma = asin(side_1 / l_3 * sin(phi_1));
	double resultant_2 = M_PI - sigma;
//	printf("%f\n\n", (side_1*side_1 + l_2*l_2 - l_3*l_3)/2*side_1*l_2);
//	
//	printf("%f\n", r_0);
//	printf("%f\n", pitch_0);
//	printf("%f\n", phi_0);
//	printf("%f\n", side_1);
//	printf("%f\n", pitch_1);
//	printf("%f\n", phi_1);
//	printf("%f\n", resultant_1);
//	printf("%f\n", sigma);
//	printf("%f\n", resultant_2);
	*cumulated_angle_position = -(resultant_1 + resultant_2);
	*m1_degree = yaw_0;
	*m2_degree = resultant_1;
	*m3_degree = resultant_2;
	*m4_degree = -(resultant_1 + resultant_2) + function_target_degree;
}

int degree_to_step(struct motor_list* robot_name, int number_of_motors)
{
	struct motor_mathod* motor_Ptr = (struct motor_mathod*)robot_name;
	
	double rad_per_step = 2*M_PI/(double)(*motor_Ptr).step_per_revolution_presison;
	
	int i =0;
	while(i<number_of_motors)
	{
		(*motor_Ptr).destination_step = (long)(((*motor_Ptr).destination_degree * (double)(*motor_Ptr).step_per_revolution_presison) / (2*M_PI));
		motor_Ptr++;
		i = i + 1;
	}
}


int rectangular_coordinate_macroscopic_copliment_checking()
{
	if(stream_of_time / time_out > 1)
	{
		 = 'y';
	}
	else
	{
		 = 'n';
	}
}

int rectangular_coordinate_microscopic_copliment_checking()
{
	//미시적 단계에서 어떻게 해결할까.....? 
}

int main()
{
	while
} 












